/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-05-04 15:59:39 UTC)
 * on 2016-05-06 at 05:27:35 UTC 
 * Modify at your own risk.
 */

package com.cs407.onthedot.onthedotbackend.tripApi;

/**
 * Service definition for TripApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link TripApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class TripApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the tripApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://poised-team-129420.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "tripApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public TripApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  TripApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "clearParticipantByPartAndTripId".
   *
   * This request holds the parameters needed by the tripApi server.  After setting any optional
   * parameters, call the {@link ClearParticipantByPartAndTripId#execute()} method to invoke the
   * remote operation.
   *
   * @param partId
   * @param tripId
   * @return the request
   */
  public ClearParticipantByPartAndTripId clearParticipantByPartAndTripId(java.lang.String partId, java.lang.Long tripId) throws java.io.IOException {
    ClearParticipantByPartAndTripId result = new ClearParticipantByPartAndTripId(partId, tripId);
    initialize(result);
    return result;
  }

  public class ClearParticipantByPartAndTripId extends TripApiRequest<Void> {

    private static final String REST_PATH = "clearParticipantByPartAndTripId/{partId}/{tripId}";

    /**
     * Create a request for the method "clearParticipantByPartAndTripId".
     *
     * This request holds the parameters needed by the the tripApi server.  After setting any optional
     * parameters, call the {@link ClearParticipantByPartAndTripId#execute()} method to invoke the
     * remote operation. <p> {@link ClearParticipantByPartAndTripId#initialize(com.google.api.client.g
     * oogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param partId
     * @param tripId
     * @since 1.13
     */
    protected ClearParticipantByPartAndTripId(java.lang.String partId, java.lang.Long tripId) {
      super(TripApi.this, "POST", REST_PATH, null, Void.class);
      this.partId = com.google.api.client.util.Preconditions.checkNotNull(partId, "Required parameter partId must be specified.");
      this.tripId = com.google.api.client.util.Preconditions.checkNotNull(tripId, "Required parameter tripId must be specified.");
    }

    @Override
    public ClearParticipantByPartAndTripId setAlt(java.lang.String alt) {
      return (ClearParticipantByPartAndTripId) super.setAlt(alt);
    }

    @Override
    public ClearParticipantByPartAndTripId setFields(java.lang.String fields) {
      return (ClearParticipantByPartAndTripId) super.setFields(fields);
    }

    @Override
    public ClearParticipantByPartAndTripId setKey(java.lang.String key) {
      return (ClearParticipantByPartAndTripId) super.setKey(key);
    }

    @Override
    public ClearParticipantByPartAndTripId setOauthToken(java.lang.String oauthToken) {
      return (ClearParticipantByPartAndTripId) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearParticipantByPartAndTripId setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearParticipantByPartAndTripId) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearParticipantByPartAndTripId setQuotaUser(java.lang.String quotaUser) {
      return (ClearParticipantByPartAndTripId) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearParticipantByPartAndTripId setUserIp(java.lang.String userIp) {
      return (ClearParticipantByPartAndTripId) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String partId;

    /**

     */
    public java.lang.String getPartId() {
      return partId;
    }

    public ClearParticipantByPartAndTripId setPartId(java.lang.String partId) {
      this.partId = partId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long tripId;

    /**

     */
    public java.lang.Long getTripId() {
      return tripId;
    }

    public ClearParticipantByPartAndTripId setTripId(java.lang.Long tripId) {
      this.tripId = tripId;
      return this;
    }

    @Override
    public ClearParticipantByPartAndTripId set(String parameterName, Object value) {
      return (ClearParticipantByPartAndTripId) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "clearTripsById".
   *
   * This request holds the parameters needed by the tripApi server.  After setting any optional
   * parameters, call the {@link ClearTripsById#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public ClearTripsById clearTripsById(java.lang.Long id) throws java.io.IOException {
    ClearTripsById result = new ClearTripsById(id);
    initialize(result);
    return result;
  }

  public class ClearTripsById extends TripApiRequest<Void> {

    private static final String REST_PATH = "clearTripsById/{id}";

    /**
     * Create a request for the method "clearTripsById".
     *
     * This request holds the parameters needed by the the tripApi server.  After setting any optional
     * parameters, call the {@link ClearTripsById#execute()} method to invoke the remote operation.
     * <p> {@link ClearTripsById#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
     * ientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected ClearTripsById(java.lang.Long id) {
      super(TripApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public ClearTripsById setAlt(java.lang.String alt) {
      return (ClearTripsById) super.setAlt(alt);
    }

    @Override
    public ClearTripsById setFields(java.lang.String fields) {
      return (ClearTripsById) super.setFields(fields);
    }

    @Override
    public ClearTripsById setKey(java.lang.String key) {
      return (ClearTripsById) super.setKey(key);
    }

    @Override
    public ClearTripsById setOauthToken(java.lang.String oauthToken) {
      return (ClearTripsById) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearTripsById setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearTripsById) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearTripsById setQuotaUser(java.lang.String quotaUser) {
      return (ClearTripsById) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearTripsById setUserIp(java.lang.String userIp) {
      return (ClearTripsById) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public ClearTripsById setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public ClearTripsById set(String parameterName, Object value) {
      return (ClearTripsById) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getParticipants".
   *
   * This request holds the parameters needed by the tripApi server.  After setting any optional
   * parameters, call the {@link GetParticipants#execute()} method to invoke the remote operation.
   *
   * @param facebookId
   * @return the request
   */
  public GetParticipants getParticipants(java.lang.String facebookId) throws java.io.IOException {
    GetParticipants result = new GetParticipants(facebookId);
    initialize(result);
    return result;
  }

  public class GetParticipants extends TripApiRequest<com.cs407.onthedot.onthedotbackend.tripApi.model.ParticipantBeanCollection> {

    private static final String REST_PATH = "participantbeancollection/{facebookId}";

    /**
     * Create a request for the method "getParticipants".
     *
     * This request holds the parameters needed by the the tripApi server.  After setting any optional
     * parameters, call the {@link GetParticipants#execute()} method to invoke the remote operation.
     * <p> {@link GetParticipants#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
     * lientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param facebookId
     * @since 1.13
     */
    protected GetParticipants(java.lang.String facebookId) {
      super(TripApi.this, "GET", REST_PATH, null, com.cs407.onthedot.onthedotbackend.tripApi.model.ParticipantBeanCollection.class);
      this.facebookId = com.google.api.client.util.Preconditions.checkNotNull(facebookId, "Required parameter facebookId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetParticipants setAlt(java.lang.String alt) {
      return (GetParticipants) super.setAlt(alt);
    }

    @Override
    public GetParticipants setFields(java.lang.String fields) {
      return (GetParticipants) super.setFields(fields);
    }

    @Override
    public GetParticipants setKey(java.lang.String key) {
      return (GetParticipants) super.setKey(key);
    }

    @Override
    public GetParticipants setOauthToken(java.lang.String oauthToken) {
      return (GetParticipants) super.setOauthToken(oauthToken);
    }

    @Override
    public GetParticipants setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetParticipants) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetParticipants setQuotaUser(java.lang.String quotaUser) {
      return (GetParticipants) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetParticipants setUserIp(java.lang.String userIp) {
      return (GetParticipants) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String facebookId;

    /**

     */
    public java.lang.String getFacebookId() {
      return facebookId;
    }

    public GetParticipants setFacebookId(java.lang.String facebookId) {
      this.facebookId = facebookId;
      return this;
    }

    @Override
    public GetParticipants set(String parameterName, Object value) {
      return (GetParticipants) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getTrips".
   *
   * This request holds the parameters needed by the tripApi server.  After setting any optional
   * parameters, call the {@link GetTrips#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetTrips getTrips(java.lang.String id) throws java.io.IOException {
    GetTrips result = new GetTrips(id);
    initialize(result);
    return result;
  }

  public class GetTrips extends TripApiRequest<com.cs407.onthedot.onthedotbackend.tripApi.model.TripBeanCollection> {

    private static final String REST_PATH = "tripbeancollection/{id}";

    /**
     * Create a request for the method "getTrips".
     *
     * This request holds the parameters needed by the the tripApi server.  After setting any optional
     * parameters, call the {@link GetTrips#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetTrips#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetTrips(java.lang.String id) {
      super(TripApi.this, "GET", REST_PATH, null, com.cs407.onthedot.onthedotbackend.tripApi.model.TripBeanCollection.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetTrips setAlt(java.lang.String alt) {
      return (GetTrips) super.setAlt(alt);
    }

    @Override
    public GetTrips setFields(java.lang.String fields) {
      return (GetTrips) super.setFields(fields);
    }

    @Override
    public GetTrips setKey(java.lang.String key) {
      return (GetTrips) super.setKey(key);
    }

    @Override
    public GetTrips setOauthToken(java.lang.String oauthToken) {
      return (GetTrips) super.setOauthToken(oauthToken);
    }

    @Override
    public GetTrips setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetTrips) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetTrips setQuotaUser(java.lang.String quotaUser) {
      return (GetTrips) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetTrips setUserIp(java.lang.String userIp) {
      return (GetTrips) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetTrips setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetTrips set(String parameterName, Object value) {
      return (GetTrips) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeParticipant".
   *
   * This request holds the parameters needed by the tripApi server.  After setting any optional
   * parameters, call the {@link StoreParticipant#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.cs407.onthedot.onthedotbackend.tripApi.model.ParticipantBean}
   * @return the request
   */
  public StoreParticipant storeParticipant(com.cs407.onthedot.onthedotbackend.tripApi.model.ParticipantBean content) throws java.io.IOException {
    StoreParticipant result = new StoreParticipant(content);
    initialize(result);
    return result;
  }

  public class StoreParticipant extends TripApiRequest<Void> {

    private static final String REST_PATH = "storeParticipant";

    /**
     * Create a request for the method "storeParticipant".
     *
     * This request holds the parameters needed by the the tripApi server.  After setting any optional
     * parameters, call the {@link StoreParticipant#execute()} method to invoke the remote operation.
     * <p> {@link StoreParticipant#initialize(com.google.api.client.googleapis.services.AbstractGoogle
     * ClientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param content the {@link com.cs407.onthedot.onthedotbackend.tripApi.model.ParticipantBean}
     * @since 1.13
     */
    protected StoreParticipant(com.cs407.onthedot.onthedotbackend.tripApi.model.ParticipantBean content) {
      super(TripApi.this, "POST", REST_PATH, content, Void.class);
    }

    @Override
    public StoreParticipant setAlt(java.lang.String alt) {
      return (StoreParticipant) super.setAlt(alt);
    }

    @Override
    public StoreParticipant setFields(java.lang.String fields) {
      return (StoreParticipant) super.setFields(fields);
    }

    @Override
    public StoreParticipant setKey(java.lang.String key) {
      return (StoreParticipant) super.setKey(key);
    }

    @Override
    public StoreParticipant setOauthToken(java.lang.String oauthToken) {
      return (StoreParticipant) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreParticipant setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreParticipant) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreParticipant setQuotaUser(java.lang.String quotaUser) {
      return (StoreParticipant) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreParticipant setUserIp(java.lang.String userIp) {
      return (StoreParticipant) super.setUserIp(userIp);
    }

    @Override
    public StoreParticipant set(String parameterName, Object value) {
      return (StoreParticipant) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeTrip".
   *
   * This request holds the parameters needed by the tripApi server.  After setting any optional
   * parameters, call the {@link StoreTrip#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.cs407.onthedot.onthedotbackend.tripApi.model.TripBean}
   * @return the request
   */
  public StoreTrip storeTrip(com.cs407.onthedot.onthedotbackend.tripApi.model.TripBean content) throws java.io.IOException {
    StoreTrip result = new StoreTrip(content);
    initialize(result);
    return result;
  }

  public class StoreTrip extends TripApiRequest<com.cs407.onthedot.onthedotbackend.tripApi.model.TripBean> {

    private static final String REST_PATH = "storeTrip";

    /**
     * Create a request for the method "storeTrip".
     *
     * This request holds the parameters needed by the the tripApi server.  After setting any optional
     * parameters, call the {@link StoreTrip#execute()} method to invoke the remote operation. <p>
     * {@link
     * StoreTrip#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.cs407.onthedot.onthedotbackend.tripApi.model.TripBean}
     * @since 1.13
     */
    protected StoreTrip(com.cs407.onthedot.onthedotbackend.tripApi.model.TripBean content) {
      super(TripApi.this, "POST", REST_PATH, content, com.cs407.onthedot.onthedotbackend.tripApi.model.TripBean.class);
    }

    @Override
    public StoreTrip setAlt(java.lang.String alt) {
      return (StoreTrip) super.setAlt(alt);
    }

    @Override
    public StoreTrip setFields(java.lang.String fields) {
      return (StoreTrip) super.setFields(fields);
    }

    @Override
    public StoreTrip setKey(java.lang.String key) {
      return (StoreTrip) super.setKey(key);
    }

    @Override
    public StoreTrip setOauthToken(java.lang.String oauthToken) {
      return (StoreTrip) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreTrip setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreTrip) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreTrip setQuotaUser(java.lang.String quotaUser) {
      return (StoreTrip) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreTrip setUserIp(java.lang.String userIp) {
      return (StoreTrip) super.setUserIp(userIp);
    }

    @Override
    public StoreTrip set(String parameterName, Object value) {
      return (StoreTrip) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link TripApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link TripApi}. */
    @Override
    public TripApi build() {
      return new TripApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link TripApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setTripApiRequestInitializer(
        TripApiRequestInitializer tripapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(tripapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
